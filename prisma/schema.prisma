generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProductRequest {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String
  upvotes     Int       @default(0)
  status      Status    @default(SUGGESTION)
  categoryId  String
  comments    Comment[]
  category    Category  @relation(fields: [categoryId], references: [id])
  Upvotes     Upvotes[]
}

model Upvotes {
  feedback   ProductRequest @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  feedbackId Int
  upvoter    User           @relation(fields: [upvotedId], references: [id])
  upvotedId  String

  @@id([feedbackId, upvotedId])
}

model Category {
  id             String           @id @default(cuid())
  title          String           @unique
  ProductRequest ProductRequest[]
}

model Comment {
  id               Int            @id @default(autoincrement())
  content          String         @db.VarChar(255)
  userId           String
  productRequestId Int
  product          ProductRequest @relation(fields: [productRequestId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id])
  replies          Reply[]
}

model Reply {
  id              Int     @id @default(autoincrement())
  content         String  @db.VarChar(255)
  author          User    @relation(fields: [authorId], references: [id])
  authorId        String
  parentComment   Comment @relation(fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId Int
  replyingTo      Reply?  @relation("replying to", fields: [replyId], references: [id])
  Reply           Reply[] @relation("replying to")
  replyId         Int?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  Comment       Comment[]
  sessions      Session[]
  Upvotes       Upvotes[]
  Reply         Reply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  SUGGESTION
  PLANNED
  IN_PROGRESS
  LIVE
}
