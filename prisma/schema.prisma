// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model ProductRequest {
    id          Int       @id @default(autoincrement())
    title       String    @db.VarChar(255)
    description String
    upvotes     Int       @default(0)
    author      User      @relation(fields: [userId], references: [id])
    userId      String
    status      Status    @default(SUGGESTION)
    category    Category  @relation(fields: [categoryId], references: [id])
    categoryId  String
    comments    Comment[]
    upvoters    User[]    @relation("upvotes")
}

model Category {
    id             String           @id @default(cuid())
    title          String           @unique
    ProductRequest ProductRequest[]
}

model Comment {
    id               Int            @id @default(autoincrement())
    user             User           @relation(fields: [userId], references: [id])
    content          String         @db.VarChar(255)
    userId           String
    product          ProductRequest @relation(fields: [productRequestId], references: [id])
    productRequestId Int
    replyingTo       Comment?       @relation("Replies", fields: [commentId], references: [id])
    replies          Comment[]      @relation("Replies")
    commentId        Int?
}

enum Status {
    SUGGESTION
    PLANNED
    IN_PROGRESS
    LIVE
    DROPPED
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String           @id @default(cuid())
    username      String?          @unique
    name          String?
    email         String?          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Comment       Comment[]
    posts         ProductRequest[]
    upvotedPosts  ProductRequest[] @relation("upvotes")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
